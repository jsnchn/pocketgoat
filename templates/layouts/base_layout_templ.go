// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.937
package layouts

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "pocketgoat/templates/components"

// BaseLayout provides the common structure for pages with user authentication
func BaseLayout(title string, extraScripts ...string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!doctype html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(title)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/layouts/base_layout.templ`, Line: 12, Col: 17}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "</title><link rel=\"stylesheet\" href=\"/static/css/main.css\"><script src=\"https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js\" defer></script><script src=\"https://cdn.jsdelivr.net/npm/pocketbase@0.26.2/dist/pocketbase.umd.js\"></script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for _, script := range extraScripts {
			templ_7745c5c3_Err = templ.Raw(script).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "</head><body x-data=\"baseLayoutData()\" x-init=\"init()\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = components.Header().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ_7745c5c3_Var1.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = components.ToastContainer().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "<script>\n\t\t\t\tfunction baseLayoutData() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tpb: null,\n\t\t\t\t\t\tuser: null,\n\t\t\t\t\t\ttoasts: [],\n\t\t\t\t\t\tshowUserMenu: false,\n\t\t\t\t\t\tinit() {\n\t\t\t\t\t\t\tthis.pb = new PocketBase('http://localhost:8090');\n\t\t\t\t\t\t\t// Check if user is already logged in\n\t\t\t\t\t\t\tthis.user = this.pb.authStore.model;\n\t\t\t\t\t\t\t// Listen for auth changes\n\t\t\t\t\t\t\tthis.pb.authStore.onChange(() => {\n\t\t\t\t\t\t\t\tthis.user = this.pb.authStore.model;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t},\n\t\t\t\t\t\tget userInitial() {\n\t\t\t\t\t\t\tif (!this.user) return '';\n\t\t\t\t\t\t\treturn (this.user.name || this.user.email || '?')[0].toUpperCase();\n\t\t\t\t\t\t},\n\t\t\t\t\t\tlogout() {\n\t\t\t\t\t\t\tthis.pb.authStore.clear();\n\t\t\t\t\t\t\tthis.user = null;\n\t\t\t\t\t\t\tthis.showUserMenu = false;\n\t\t\t\t\t\t\tthis.addToast('Logged out successfully', 'success');\n\t\t\t\t\t\t\t// Redirect to home if on settings page\n\t\t\t\t\t\t\tif (window.location.pathname === '/settings') {\n\t\t\t\t\t\t\t\twindow.location.href = '/';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\taddToast(message, type = 'success') {\n\t\t\t\t\t\t\tconst id = Date.now();\n\t\t\t\t\t\t\tthis.toasts.push({ id, message, type });\n\t\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\t\tthis.removeToast(id);\n\t\t\t\t\t\t\t}, 2000);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tremoveToast(id) {\n\t\t\t\t\t\t\tthis.toasts = this.toasts.filter(toast => toast.id !== id);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t</script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
