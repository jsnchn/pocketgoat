package templates

templ Home() {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>PocketGoat - Home</title>
			<link rel="stylesheet" href="/static/css/main.css">
			<script src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js" defer></script>
			<script src="https://cdn.jsdelivr.net/npm/pocketbase@0.26.2/dist/pocketbase.umd.js"></script>
		</head>
		<body x-data="{ 
			pb: null,
			user: null,
			toasts: [],
			otpStep: false,
			otpEmail: '',
			showUserMenu: false,
			init() {
				this.pb = new PocketBase('http://localhost:8090');
				// Check if user is already logged in
				this.user = this.pb.authStore.model;
				// Listen for auth changes
				this.pb.authStore.onChange(() => {
					this.user = this.pb.authStore.model;
				});
			},
			get userInitial() {
				if (!this.user) return '';
				return (this.user.name || this.user.email || '?')[0].toUpperCase();
			},
			logout() {
				this.pb.authStore.clear();
				this.user = null;
				this.showUserMenu = false;
				this.addToast('Logged out successfully', 'success');
			},
			addToast(message, type = 'success') {
				const id = Date.now();
				this.toasts.push({ id, message, type });
				setTimeout(() => {
					this.removeToast(id);
				}, 2000);
			},
			removeToast(id) {
				this.toasts = this.toasts.filter(toast => toast.id !== id);
			},
			async testAPI() {
				try {
					const response = await fetch('/api/hello');
					const data = await response.json();
					if (response.ok) {
						this.addToast(data.message || 'API call successful!', 'success');
					} else {
						this.addToast('API call failed: ' + (data.message || 'Unknown error'), 'error');
					}
				} catch (error) {
					this.addToast('Network error: ' + error.message, 'error');
				}
			},
			async loginWithGoogle() {
				try {
					const authData = await this.pb.collection('users').authWithOAuth2({ provider: 'google' });
					this.addToast('Successfully logged in with Google!', 'success');
					this.$dispatch('close-modal', 'login-modal');
					// Store auth data or redirect
					console.log('Auth data:', authData);
				} catch (error) {
					this.addToast('Google login failed: ' + error.message, 'error');
				}
			},
			async requestOTP(email) {
				try {
					await this.pb.collection('users').requestOTP(email);
					this.otpEmail = email;
					this.otpStep = true;
					this.addToast('OTP sent to your email!', 'success');
				} catch (error) {
					this.addToast('Failed to send OTP: ' + error.message, 'error');
				}
			},
			async verifyOTP(otpCode) {
				try {
					const authData = await this.pb.collection('users').authWithOTP(this.otpEmail, otpCode);
					this.addToast('Successfully logged in!', 'success');
					this.$dispatch('close-modal', 'login-modal');
					this.otpStep = false;
					this.otpEmail = '';
					// Store auth data or redirect
					console.log('Auth data:', authData);
				} catch (error) {
					this.addToast('Invalid OTP: ' + error.message, 'error');
				}
			}
		}" x-init="init()">
			<!-- User Menu / Login Button -->
			<div class="user-menu">
				<!-- Login Button when not logged in -->
				<button 
					x-show="!user"
					@click="$dispatch('open-modal', 'login-modal')"
					class="btn"
				>
					Login
				</button>
				
				<!-- User Avatar Menu when logged in -->
				<div x-show="user" x-cloak>
				<div x-data="{ open: false }" @click.outside="open = false">
					<div @click="open = !open">
						<img 
							x-show="user && user.avatar" 
							:src="pb.files.getURL(user, user.avatar, { thumb: '40x40' })"
							:alt="user?.name || user?.email"
							class="avatar"
						>
						<div 
							x-show="!user || !user.avatar" 
							class="avatar-placeholder"
							x-text="userInitial"
						></div>
					</div>
					
					<div 
						x-show="open" 
						x-transition:enter="transition ease-out duration-100"
						x-transition:enter-start="transform opacity-0 scale-95"
						x-transition:enter-end="transform opacity-100 scale-100"
						x-transition:leave="transition ease-in duration-75"
						x-transition:leave-start="transform opacity-100 scale-100"
						x-transition:leave-end="transform opacity-0 scale-95"
						class="dropdown-menu"
						x-cloak
					>
						<div class="user-info">
							<strong x-text="user?.name || 'User'"></strong>
							<p x-text="user?.email"></p>
						</div>
						<hr>
						<a href="/settings">Settings</a>
						<hr>
						<button @click="logout()">Logout</button>
					</div>
				</div>
			</div>
		</div>

			<section class="hero">
				<div class="container text-center">
					<h1 class="mb-3">Welcome to PocketGoat</h1>
					<p class="mb-5" style="font-size: 1.25rem; color: #6c757d;">Your pocket-sized application</p>
					<div class="button-group">
						<button 
							@click="testAPI()"
							class="btn btn-secondary"
						>
							Test API
						</button>
					</div>
				</div>
			</section>

			<!-- Toast Container -->
			<div class="toast-container">
				<template x-for="toast in toasts" :key="toast.id">
					<div 
						x-show="true"
						x-transition:enter="transform ease-out duration-300 transition"
						x-transition:enter-start="translate-y-2 opacity-0"
						x-transition:enter-end="translate-y-0 opacity-100"
						x-transition:leave="transition ease-in duration-100"
						x-transition:leave-start="opacity-100"
						x-transition:leave-end="opacity-0"
						class="toast"
						:class="toast.type"
					>
						<div class="toast-message">
							<strong x-text="toast.type === 'success' ? '✓ Success' : '⚠ Error'"></strong>
							<br>
							<span x-text="toast.message"></span>
						</div>
						<button 
							@click="removeToast(toast.id)"
							class="toast-close"
							aria-label="Close"
						>
							✕
						</button>
					</div>
				</template>
			</div>

			<!-- Login Modal -->
			<div 
				class="modal"
				:class="{ 'is-active': showLoginModal }"
				x-data="{ showLoginModal: false }"
				x-on:open-modal.window="if ($event.detail === 'login-modal') { showLoginModal = true; otpStep = false; otpEmail = ''; }"
				x-on:close-modal.window="showLoginModal = false"
				@click="if ($event.target === $el) showLoginModal = false"
				@keydown.escape.window="showLoginModal = false"
			>
				<div class="modal-content">
					<div class="modal-header">
						<h3 class="modal-title">Login to your account</h3>
						<button class="close" aria-label="close" @click="showLoginModal = false">&times;</button>
					</div>
					<div class="modal-body">
						<div x-show="!otpStep">
							<button 
								type="button"
								@click="loginWithGoogle()"
								class="btn btn-secondary btn-full mb-4"
								style="display: flex; align-items: center; justify-content: center; gap: 0.5rem;"
							>
								<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
									<path fill-rule="evenodd" clip-rule="evenodd" d="M17.64 9.20454C17.64 8.56636 17.5827 7.95272 17.4764 7.36363H9V10.845H13.8436C13.635 11.97 13.0009 12.9231 12.0477 13.5613V15.8195H14.9564C16.6582 14.2527 17.64 11.9454 17.64 9.20454Z" fill="#4285F4"/>
									<path fill-rule="evenodd" clip-rule="evenodd" d="M9 18C11.43 18 13.4673 17.1941 14.9564 15.8195L12.0477 13.5613C11.2418 14.1013 10.2109 14.4204 9 14.4204C6.65591 14.4204 4.67182 12.8372 3.96409 10.71H0.957275V13.0418C2.43818 15.9831 5.48182 18 9 18Z" fill="#34A853"/>
									<path fill-rule="evenodd" clip-rule="evenodd" d="M3.96409 10.71C3.78409 10.17 3.68182 9.59318 3.68182 9C3.68182 8.40682 3.78409 7.83 3.96409 7.29V4.95818H0.957273C0.347727 6.17318 0 7.54773 0 9C0 10.4523 0.347727 11.8268 0.957273 13.0418L3.96409 10.71Z" fill="#FBBC05"/>
									<path fill-rule="evenodd" clip-rule="evenodd" d="M9 3.57955C10.3214 3.57955 11.5077 4.03364 12.4405 4.92545L15.0218 2.34409C13.4632 0.891818 11.4259 0 9 0C5.48182 0 2.43818 2.01682 0.957275 4.95818L3.96409 7.29C4.67182 5.16273 6.65591 3.57955 9 3.57955Z" fill="#EA4335"/>
								</svg>
								Continue with Google
							</button>
							
							<div class="divider">
								<hr>
								<span>or</span>
							</div>
							
							<form @submit.prevent="requestOTP($el.email.value)">
								<div class="form-group">
									<label class="form-label" for="email">Email (for OTP login)</label>
									<input 
										type="email" 
										id="email" 
										name="email"
										class="input"
										placeholder="you@example.com"
										required
									/>
								</div>
								<button type="submit" class="btn btn-full">Send OTP</button>
							</form>
						</div>
						
						<div x-show="otpStep" x-cloak>
							<p class="mb-4">Enter the OTP sent to <strong x-text="otpEmail"></strong></p>
							<form @submit.prevent="verifyOTP($el.otp.value)">
								<div class="form-group">
									<label class="form-label" for="otp">One-Time Password</label>
									<input 
										type="text" 
										id="otp" 
										name="otp"
										class="input"
										placeholder="123456"
										pattern="[0-9]{6}"
										maxlength="6"
										required
										autofocus
									/>
								</div>
								<div class="button-group" style="gap: 0.5rem;">
									<button type="submit" class="btn" style="flex: 1;">Verify OTP</button>
									<button type="button" class="btn btn-secondary" style="flex: 1;" @click="otpStep = false; otpEmail = ''">Back</button>
								</div>
							</form>
					</div>
				</div>
			</div>
			</div>
		</body>
	</html>
}
