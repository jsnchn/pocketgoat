package templates

import "pocketgoat/templates/layouts"

templ Settings() {
	@layouts.BaseLayout("PocketGoat - Settings") {
		<script>
			// Extend the base layout data with settings-specific methods
			document.addEventListener('alpine:init', () => {
				Alpine.data('settingsData', () => ({
					...Alpine.$data(document.body),
					profileLoading: false,
					preferencesLoading: false,
					deletingAccount: false,
					profileTimeout: null,
					preferencesTimeout: null,
					// Debounce utility function
					debounce(func, wait) {
						let timeout;
						return function executedFunction(...args) {
							const later = () => {
								clearTimeout(timeout);
								func(...args);
							};
							clearTimeout(timeout);
							timeout = setTimeout(later, wait);
						};
					},
					async deleteAccount() {
						if (!this.user) {
							this.addToast('You must be logged in to delete your account', 'error');
							return;
						}

						this.deletingAccount = true;
						try {
							// Delete the user account
							await this.pb.collection('users').delete(this.user.id);
							
							// Clear auth store
							this.pb.authStore.clear();
							
							// Redirect to home page
							window.location.href = '/';
						} catch (error) {
							console.error('Account deletion error:', error);
							this.addToast('Failed to delete account: ' + (error.message || 'Unknown error'), 'error');
							this.deletingAccount = false;
						}
					},
					async autoSaveProfile(name) {
						if (!this.user) {
							return;
						}

						this.profileLoading = true;
						
						try {
							// Update the user record
							const updatedUser = await this.pb.collection('users').update(this.user.id, {
								name: name
							});
							
							// Update the local user object
							this.user = updatedUser;
							this.addToast('Profile saved', 'success');
						} catch (error) {
							console.error('Profile update error:', error);
							this.addToast('Failed to save profile: ' + (error.message || 'Unknown error'), 'error');
						} finally {
							this.profileLoading = false;
						}
					},
					debouncedProfileSave: null,
					init() {
						// Initialize the debounced function
						this.debouncedProfileSave = this.debounce((name) => {
							this.autoSaveProfile(name);
						}, 1000);
					},
					async autoSavePreferences(emailVisibility) {
						if (!this.user) {
							return;
						}

						this.preferencesLoading = true;
						
						try {
							// Update the user record
							const updatedUser = await this.pb.collection('users').update(this.user.id, {
								emailVisibility: emailVisibility
							});
							
							// Update the local user object
							this.user = updatedUser;
							this.addToast('Preferences saved', 'success');
						} catch (error) {
							console.error('Preferences update error:', error);
							this.addToast('Failed to save preferences: ' + (error.message || 'Unknown error'), 'error');
						} finally {
							this.preferencesLoading = false;
						}
					}
				}));
			});
		</script>

		<div class="container mx-auto p-6 max-w-4xl" x-data="settingsData" x-init="init()">
			<div class="space-y-6">
				<h1 class="text-3xl font-bold">Settings</h1>
				
				<!-- Profile Section -->
				<div class="card bg-base-100 shadow-xl border-1 border-base-300">
					<div class="card-body space-y-4">
						<div class="flex items-center justify-between">
							<h2 class="card-title">Profile</h2>
							<span x-show="profileLoading" class="text-sm text-primary">Saving...</span>
						</div>
						<div class="space-y-8">
							<div class="form-control">
								<label class="floating-label">
									<input 
										type="text" 
										id="name" 
										name="name"
										:value="user?.name || ''"
										@input="debouncedProfileSave($event.target.value)"
										placeholder="Your display name"
										class="input input-bordered w-full"
									/>
									<span>Display Name</span>
								</label>
							</div>

							<div class="form-control">
								<label class="floating-label">
									<input 
										type="email" 
										id="email" 
										name="email"
										:value="user?.email || ''"
										disabled
										class="input input-bordered w-full"
									/>
									<span>Email</span>
								</label>
							</div>
						</div>
					</div>
				</div>

				<!-- Preferences Section -->
				<div class="card bg-base-100 shadow-xl border-1 border-base-300">
					<div class="card-body space-y-4">
						<div class="flex items-center justify-between">
							<h2 class="card-title">Preferences</h2>
							<span x-show="preferencesLoading" class="text-sm text-primary">Saving...</span>
						</div>
						<div class="space-y-8">
							<div class="form-control">
								<label class="cursor-pointer label flex flex-row gap-6">
									<input 
										type="checkbox" 
										name="emailVisibility"
										:checked="user?.emailVisibility || false"
										@change="autoSavePreferences($event.target.checked)"
										class="toggle toggle-primary"
									/>
									<div>
										<span class="label-text text-lg">Email Visibility</span>
										<p class="text-sm text-base-content/70">Toggle on to let other users see your email address</p>
									</div>
								</label>
							</div>
						</div>
					</div>
				</div>

				<!-- Danger Zone -->
				<div class="card bg-error/10 border-1 border-error shadow-xl">
					<div class="card-body">
						<h2 class="card-title text-2xl text-error mb-4">Danger Zone</h2>
						<p class="text-base-content/80 mb-4">Once you delete your account, there is no going back. Please be certain.</p>
						<div class="card-actions justify-end">
							<button 
								@click="const email = prompt('Are you sure you want to delete your account? This action cannot be undone. Please enter the email address on your account to confirm deletion.'); if(email === user?.email) { deleteAccount(); } else if(email !== null) { addToast('Email does not match. Account deletion cancelled.', 'error'); }"
								class="btn btn-error"
								:disabled="deletingAccount"
								:class="{'loading': deletingAccount}"
							>
								<span x-show="!deletingAccount">Delete Account</span>
								<span x-show="deletingAccount">Deleting...</span>
							</button>
						</div>
					</div>
				</div>
			</div>
		</div>
	}
}
